name: CI-CD

on:
  push:
    branches: [ main, dev, cicd/* ]
    paths: [ 'build.sh', 'docker-compose.yml', 'Dockerfile', '**/*.go', '**/*.ts', '**/*.js', '.github/workflows/**' ]
  
  pull_request:
    types: [opened, reopened, synchronize]
    paths: [ 'build.sh', 'docker-compose.yml', 'Dockerfile', '**/*.go', '**/*.ts', '**/*.js', '.github/workflows/**' ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  Generate-Tag: 
    runs-on: ubuntu-latest
    name: Generate Tag Name
    outputs:
      tag_name: ${{ steps.gen_tag_name.outputs.tag_name }}
      vtag: ${{ steps.gen_tag_name.outputs.vtag }}
      vfull: ${{ steps.gen_tag_name.outputs.vfull }}
      image_name: ${{ steps.gen_tag_name.outputs.image_name }}
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Determine tag name
        id: gen_tag_name
        shell: bash
        run: |
          IMAGE_NAME="ghcr.io/lumerin-protocol/proxy-router"
          VMAJ_NEW=1
          VMIN_NEW=2
          VPAT_NEW=4
          set +o pipefail
          VLAST=$(git describe --tags --abbrev=0 --match='v[1-9]*' refs/remotes/origin/main 2>/dev/null | cut -c2-)
          
          if [ -n "$VLAST" ]; then
              eval $(echo "$VLAST" | awk -F '.' '{print "VMAJ="$1" VMIN="$2" VPAT="$3}')
          else
              VMAJ=0
              VMIN=0
              VPAT=0
          fi

          if [ "$GITHUB_REF_NAME" = "main" ]; then
              if [ "$VMAJ_NEW" -gt "$VMAJ" ]; then
                  VMAJ=$VMAJ_NEW
                  VMIN=$VMIN_NEW
                  VPAT=$VPAT_NEW
              else
                  VMIN=$((VMIN+1))
                  VPAT=0
              fi
              VFULL=${VMAJ}.${VMIN}.${VPAT}
              VTAG=v$VFULL
          else
              MB=$(git merge-base refs/remotes/origin/main HEAD)
              VPAT=$(git rev-list --count --no-merges ${MB}..HEAD)
              VFULL=${VMAJ}.${VMIN}.${VPAT}
              RNAME=${GITHUB_REF_NAME##*/}
              [ "$GITHUB_EVENT_NAME" = "pull_request" ] && RNAME=pr${GITHUB_REF_NAME%/merge}
              VTAG=v${VFULL}-${RNAME}
          fi

          # Output variables for use in subsequent jobs environment
          echo "::set-output name=tag_name::${VTAG}"
          echo "::set-output name=vtag::${VTAG}"
          echo "::set-output name=vfull::${VFULL}"
          echo "::set-output name=image_name::${IMAGE_NAME}"
          echo "‚úÖ New Build Tag: $VTAG" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Docker Image: ${IMAGE_NAME}:${VTAG}" >> $GITHUB_STEP_SUMMARY
          echo "‚ùå Old Major Tag: $VLAST"  >> $GITHUB_STEP_SUMMARY

  Build-Test:
      if: |
          (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'dev')) ||
          (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/cicd/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
      runs-on: ubuntu-latest
      needs: Generate-Tag
      steps:
        - name: Checkout repository
          uses: actions/checkout@v4
          with:
            fetch-depth: 0
            fetch-tags: true

        - name: Build Docker Image to Test
          run: |
            BUILDTAG=${{ needs.Generate-Tag.outputs.tag_name }}
            BUILDIMAGE=${{ needs.Generate-Tag.outputs.image_name }}
            BUILDCOMMIT=${{ github.sha }}
            docker build \
              --platform linux/amd64 \
              --build-arg TAG_NAME=$BUILDTAG \
              --build-arg COMMIT=$BUILDCOMMIT \
              --load \
              -t $BUILDIMAGE:$BUILDTAG \
              . || (echo "‚ùå Failed to build image with tag: $BUILDIMAGE:$BUILDTAG" && exit 1)
            echo "‚úÖ Proxy-Router Test Build of $BUILDIMAGE:$BUILDTAG Successful!"

        - name: Run Docker Image to Test
          run: |
            BUILDTAG=${{ needs.Generate-Tag.outputs.tag_name }}
            BUILDIMAGE=${{ needs.Generate-Tag.outputs.image_name }}
            docker run -d --name proxy-router-test \
              -e CLONE_FACTORY_ADDRESS=${{ vars.CLONE_FACTORY_ADDRESS }} \
              -e ETH_NODE_ADDRESS=${{ vars.ETH_NODE_ADDRESS }} \
              -e POOL_ADDRESS=${{ vars.POOL_ADDRESS }} \
              -e WEB_ADDRESS=0.0.0.0:8888 \
              -e WEB_PUBLIC_ADDRESS=http://localhost:8888 \
              -e WALLET_PRIVATE_KEY=${{ secrets.WALLET_PRIVATE_KEY }} \
              -p 8888:8888  \
              $BUILDIMAGE:$BUILDTAG || (echo "‚ùå Failed to start image with tag: $BUILDIMAGE:$BUILDTAG" && exit 1)
            timeout=10
            while ! curl -s http://localhost:8888/healthcheck >/dev/null; do
              ((timeout--))
              if ((timeout <= 0)); then
                echo "üìú Fetching container logs:"
                docker logs proxy-router-test
                docker stop proxy-router-test
                docker rm proxy-router-test
                echo "‚ùå Proxy-Router $BUILDIMAGE:$BUILDTAG failed to start in time"
                exit 1
              fi    
              sleep 1
            done
            echo "‚úÖ Proxy-Router $BUILDIMAGE:$BUILDTAG started successfully!"

            VERSION_TAG=$(curl -s http://localhost:8888/healthcheck | jq -r '.version')
            echo "üìú Fetching container logs:"
            docker logs proxy-router-test
            if [ "$VERSION_TAG" == "$BUILDTAG" ]; then
              docker stop proxy-router-test
              docker rm proxy-router-test 
              echo "‚úÖ Version tag in container matches the expected tag: $VERSION_TAG"
            else
              docker stop proxy-router-test
              docker rm proxy-router-test 
              echo "‚ùå Version tag mismatch: Expected $BUILDTAG, but got $VERSION_TAG"
              exit 1  # Prevent failure and continue
            fi
            echo "‚úÖ Proxy-Router Test Run of $BUILDIMAGE:$BUILDTAG Successful!"

  OS-Build:
    if: |
      (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'dev')) ||
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
    runs-on: ubuntu-latest
    needs: Build-Test
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64  # Exclude windows/arm64
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache-dependency-path: |
            go.sum

      - name: Install dependencies
        run: |
          go mod download

      - name: Set GOOS and GOARCH for cross-compilation
        run: |
          echo "GOOS=${{ matrix.goos }}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV

      - name: Build
        run: |
          BUILDTAG=${{ needs.Generate-Tag.outputs.tag_name }}
          COMMIT=${{ github.sha }}
          go mod tidy
          go build \
            -ldflags="-s -w \
              -X 'github.com/Lumerin-protocol/proxy-router/internal/config.BuildVersion=$BUILDTAG' \
              -X 'github.com/Lumerin-protocol/proxy-router/internal/config.Commit=$COMMIT' \
            " \
            -o ./proxy-router ./cmd || (echo "‚ùå Failed to build binary" && exit 1)
          echo "‚úÖ Proxy-Router Build Successful!"

      - name: Pack artifacts
        run: |
          BUILDTAG="proxy-router-${{ needs.Generate-Tag.outputs.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          # Adjust artifact extension based on GOOS
          if [ "${{ matrix.goos }}" == "windows" ]; then
            ARTIFACT="$BUILDTAG.exe"
          else
            ARTIFACT="$BUILDTAG"
          fi
          echo "Artifact: $ARTIFACT"
          mv ./proxy-router $ARTIFACT  # Rename to match OS/arch
          chmod +x $ARTIFACT  # Ensure it's executable
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ./proxy-router-${{ needs.Generate-Tag.outputs.tag_name }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          name: proxy-router-${{ matrix.goos }}-${{ matrix.goarch }}

  Release:
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))  
    needs:
      - OS-Build
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifact

      - name: Prepare artifacts
        run: |
          mkdir -p ./artifact/release
          mv ./artifact/*/* ./artifact/release
          ls -lah ./artifact/release

      - name: Create release
        id: create_release
        uses: anzz1/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.Generate-Tag.outputs.tag_name }}
          prerelease: ${{ github.ref != 'refs/heads/main' }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.Generate-Tag.outputs.tag_name }} 
          files: ./artifact/release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  GHCR-Build-and-Push:
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
    needs: Build-Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Platform Docker Image
        run: |
          BUILDTAG=${{ needs.Generate-Tag.outputs.tag_name }}
          BUILDIMAGE=${{ needs.Generate-Tag.outputs.image_name }}
          BUILDCOMMIT=${{ github.sha }}
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg TAG_NAME=$BUILDTAG \
            --build-arg COMMIT=$BUILDCOMMIT \
            --push \
            -t $BUILDIMAGE:$BUILDTAG \
            . || (echo "‚ùå Failed to push image with tag: $BUILDIMAGE:$BUILDTAG" && exit 1)
          echo "‚úÖ Proxy-Router Build and Push of $BUILDIMAGE:$BUILDTAG Successful!"

      - name: Optionally Push Latest Tag
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          BUILDIMAGE=${{ needs.Generate-Tag.outputs.image_name }}
          BUILDTAG=${{ needs.Generate-Tag.outputs.tag_name }}
          docker pull $BUILDIMAGE:$BUILDTAG || (echo "‚ùå Failed to pull image: $BUILDIMAGE:$BUILDTAG" && exit 1)
          docker tag $BUILDIMAGE:$BUILDTAG $BUILDBASE:latest || (echo "‚ùå Failed to tag image as :latest" && exit 1)
          docker push $BUILDBASE:latest || (echo "‚ùå Failed to push image as :latest" && exit 1)
          echo "‚úÖ Proxy-Router Push $BUILDBASE:latest Tag Successful!"

  GitLab-Deploy:
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
    needs:
      - GHCR-Build-and-Push
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Determine GitLab Target Branch
        id: set_target_branch
        run: |
          if [ "${{ github.ref_name }}" == "dev" ]; then
            echo "gitlab_branch=dev" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "main" ]; then
            echo "gitlab_branch=main" >> $GITHUB_ENV
          else
            echo "This branch is not configured to trigger GitLab pipelines."
            exit 1
          fi

      - name: Trigger GitLab Pipeline
        run: |
          echo "Triggering GitLab Build and Deploy for branch ${{ github.ref_name }} with tag ${{ needs.Generate-Tag.outputs.tag_name }}"
      
          # Send request to GitLab
          response=$(curl --silent \
            --request POST \
            --url "${{ secrets.GITLAB_TRIGGER_URL }}" \
            --form "token=${{ secrets.GITLAB_TRIGGER_TOKEN }}" \
            --form "ref=${{ env.gitlab_branch }}" \
            --form "variables[SOURCE_REPO]=${{ github.repository }}" \
            --form "variables[SOURCE_BRANCH]=${{ github.ref_name }}" \
            --form "variables[GITHUB_VFULL]=${{ needs.Generate-Tag.outputs.vfull }}" \
            --form "variables[GITHUB_TAG]=${{ needs.Generate-Tag.outputs.tag_name }}")
      
          # Parse JSON response using jq
          gitlab_status=$(echo "$response" | jq -r '.status // "unknown"')
          gitlab_web_url=$(echo "$response" | jq -r '.web_url // "N/A"')
      
          # Log the response
          echo "GitLab Response: $response"
      
          # Validate the status field
          if [[ "$gitlab_status" =~ ^(created|preparing|success|running|scheduled)$ ]]; then
            echo "‚úÖ GitLab pipeline triggered successfully! Status: $gitlab_status"
            echo "Pipeline details: $gitlab_web_url"
          else
            echo "‚ùå GitLab pipeline FAILED. Invalid status: $gitlab_status"
            echo "Pipeline details: $gitlab_web_url"
            exit 1
          fi