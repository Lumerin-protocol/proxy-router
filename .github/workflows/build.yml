name: CI-CD

on:
  push:
    branches: [ main, dev, cicd/* ]
    paths: [ 'build.sh', 'docker-compose.yml', 'Dockerfile', '**/*.go', '**/*.ts', '**/*.js', '.github/workflows/**' ]
  
  pull_request:
    types: [opened, reopened, synchronize]
    paths: [ 'build.sh', 'docker-compose.yml', 'Dockerfile', '**/*.go', '**/*.ts', '**/*.js', '.github/workflows/**' ]

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

defaults:
  run:
    shell: bash

jobs:
  OS-Build:
    if: |
      (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/cicd/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
    runs-on: ubuntu-latest  # Updated to use ubuntu-latest instead of ubuntu-22.04
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64  # Exclude windows/arm64
      fail-fast: false

    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name

      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}"
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          cache-dependency-path: |
            go.sum

      - name: Install dependencies
        run: |
          go mod download

      - name: Set GOOS and GOARCH for cross-compilation
        run: |
          echo "GOOS=${{ matrix.goos }}" >> $GITHUB_ENV
          echo "GOARCH=${{ matrix.goarch }}" >> $GITHUB_ENV

      - name: Build
        run: |
          make build

      - name: Pack artifacts
        run: |
          echo "VFULL: ${{ env.VFULL }}"
          # Adjust artifact extension based on GOOS
          if [ "${{ matrix.goos }}" == "windows" ]; then
            ARTIFACT="proxy-router-${{ env.TAG_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}.exe"
          else
            ARTIFACT="proxy-router-${{ env.TAG_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}"
          fi
          echo "Artifact: $ARTIFACT"
          mv ./proxy-router $ARTIFACT  # Rename to match OS/arch
          
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          path: ./proxy-router-${{ env.TAG_NAME }}-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}
          name: proxy-router-${{ matrix.goos }}-${{ matrix.goarch }}
  Release:
    if: |
      (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/cicd/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
    # (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))  
    needs:
      - OS-Build
    runs-on: ubuntu-latest
    steps:
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name

      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}"
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"
          
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifact

      - name: Move artifacts
        run: |
          mkdir -p ./artifact/release
          mv ./artifact/*/* ./artifact/release

      - name: Create release
        id: create_release
        uses: anzz1/action-create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG_NAME }}
          prerelease: ${{ github.ref != 'refs/heads/main' }}

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.TAG_NAME }} 
          files: ./artifact/release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  GHCR-Test:
    if: |
        (github.event_name == 'pull_request' && (github.base_ref == 'main' || github.base_ref == 'dev')) ||
        (github.event_name == 'push' && (startsWith(github.ref, 'refs/heads/cicd/') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name
  
      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}" 
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"      
  
      - name: Build Docker Image to Test
        run: |
          IMAGE_NAME=${{ env.IMAGE_NAME_BASE }}:${{ env.TAG_NAME }}
          docker build \
            --platform linux/amd64 \
            --build-arg TAG_NAME=${{ env.TAG_NAME }} \
            --build-arg COMMIT=${{ github.sha }} \
            --load \
            -t ${{ env.IMAGE_NAME }} \
            . || (echo "❌ Failed to build image with tag: $IMAGE_NAME" && exit 1)
          echo "✅ Proxy-Router Build TEST Successful!"

  GHCR-Build-and-Push:
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
    needs: 
      - GHCR-Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name
  
      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}" 
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"      
  
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and Push Multi-Platform Docker Image
        run: |
          IMAGE_NAME=${{ env.IMAGE_NAME_BASE }}:${{ env.TAG_NAME }}
          docker buildx build \
            --platform linux/amd64,linux/arm64 \
            --build-arg TAG_NAME=${{ env.TAG_NAME }} \
            --build-arg COMMIT=${{ github.sha }} \
            --push \
            -t $IMAGE_NAME \
            . || (echo "❌ Failed to push image with tag: $IMAGE_NAME" && exit 1)
          echo "✅ Proxy-Router Build and Push Successful!"

      - name: Optionally Push Latest Tag
        if: ${{ github.ref == 'refs/heads/main' }}
        run: |
          IMAGE_NAME=${{ env.IMAGE_NAME_BASE }}:${{ env.TAG_NAME }}
          echo "Pulling image before tagging as :latest"
          docker pull $IMAGE_NAME || (echo "❌ Failed to pull image: $IMAGE_NAME" && exit 1)
          
          echo "Tagging image as :latest"
          LATEST_IMAGE=${{ env.IMAGE_NAME_BASE }}:latest
          docker tag $IMAGE_NAME $LATEST_IMAGE
          
          echo "Pushing image as :latest"
          docker push $LATEST_IMAGE || (echo "❌ Failed to push image as :latest" && exit 1)
          echo "✅ Proxy-Router Push Latest Tag Successful!"

  GitLab-Deploy:
    if: |
      (github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'))
    needs:
      - GHCR-Build-and-Push
    runs-on: ubuntu-latest
    steps:
      - name: Clone
        id: checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y jq

      - name: Generate Tag Name
        uses: ./.github/actions/gen_tag_name
  
      - name: Verify environment variables
        run: |
          echo "TAG_NAME=${{ env.TAG_NAME }}"
          echo "VTAG=${{ env.VTAG }}"
          echo "VFULL=${{ env.VFULL }}" 
          echo "IMAGE_NAME_BASE=${{ env.IMAGE_NAME_BASE }}"
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}"      

      - name: Determine GitLab Target Branch
        id: set_target_branch
        run: |
          if [ "${{ github.ref_name }}" == "dev" ]; then
            echo "gitlab_branch=dev" >> $GITHUB_ENV
          elif [ "${{ github.ref_name }}" == "main" ]; then
            echo "gitlab_branch=main" >> $GITHUB_ENV
          else
            echo "This branch is not configured to trigger GitLab pipelines."
            exit 1
          fi

      - name: Trigger GitLab Pipeline
        run: |
          echo "Triggering GitLab Build and Deploy for branch ${{ github.ref_name }} with tag ${{ env.TAG_NAME }}"
      
          # Send request to GitLab
          response=$(curl --silent \
            --request POST \
            --url "${{ secrets.GITLAB_TRIGGER_URL }}" \
            --form "token=${{ secrets.GITLAB_TRIGGER_TOKEN }}" \
            --form "ref=${{ env.gitlab_branch }}" \
            --form "variables[SOURCE_REPO]=${{ github.repository }}" \
            --form "variables[SOURCE_BRANCH]=${{ github.ref_name }}" \
            --form "variables[GITHUB_VFULL]=${{ env.VFULL }}" \
            --form "variables[GITHUB_TAG]=${{ env.TAG_NAME }}")
      
          # Parse JSON response using jq
          gitlab_status=$(echo "$response" | jq -r '.status // "unknown"')
          gitlab_web_url=$(echo "$response" | jq -r '.web_url // "N/A"')
      
          # Log the response
          echo "GitLab Response: $response"
      
          # Validate the status field
          if [[ "$gitlab_status" =~ ^(created|preparing|success|running|scheduled)$ ]]; then
            echo "✅ GitLab pipeline triggered successfully! Status: $gitlab_status"
            echo "Pipeline details: $gitlab_web_url"
          else
            echo "❌ GitLab pipeline FAILED. Invalid status: $gitlab_status"
            echo "Pipeline details: $gitlab_web_url"
            exit 1
          fi