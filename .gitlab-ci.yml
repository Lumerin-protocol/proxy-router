variables: # keep this list alphabetically sorted
  CI_AWS_TASK: "proxy-router"
  ENVIRONMENT: "production"
  NODE_DEF: "prt"
  WEB_ADDRESS: "0.0.0.0:8080"

stages:
  - test
  - build
  - deploy
  # - e2e-test
  - release

default:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest

.ecr_login_script: &ecr_login_script |
  echo "**************************"
  echo "*** ECR Login to Shared Titanio-NET Repo in USE-1"
  echo "**************************"
  docker system prune -af
  aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $CI_AWS_TitanIO_NET_ECR

.create_image_tag: &create_image_tag |
  echo "**************************"
  echo "*** Tag Image "
  echo "**************************"
  IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)-$TGT_ENV-$NODE_DEF" 
  echo $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG

#######################
# TEST STAGE 
#######################
lint:
  inherit:
    default: false
  image: golangci/golangci-lint:v1.50.1-alpine
  stage: test
  only:
    - branches
    - tags
    - merge_requests
  script:
    - golangci-lint run -v

test:
  inherit:
    default: false
  image: golang:1.19.3-alpine
  stage: test
  only:
    - branches
    - tags
    - merge_requests
  script:
    - apk add --no-cache git make musl-dev gcc
    - go version
    - go mod download
    - make test-unit

#######################
# BUILD STAGE  
#######################
.build_raw_image: &build_raw_image |
  echo "**************************"
  echo "*** Build RAW Image with no build arguments "
  echo "**************************"
  docker build \
    --build-arg COMMIT=$CI_COMMIT_SHORT_SHA \
    -t $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG --no-cache .
  
  echo "**************************"
  echo "*** Tag Image with $TGT_ENV-latest"
  echo "**************************"
  docker tag $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$TGT_ENV-latest

  echo "**************************"
  echo "*** Push Images"
  echo "**************************"
  docker push $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG
  docker push $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$TGT_ENV-latest

#######################
# BUILD DEVELOPMENT 
#######################
bedrock-02-DEV-rawimage:
  stage: build
  environment: dev
  needs: ["test", "lint"]
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - if: $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - proxy #devops
    - bedrock
    - shell
    - titanio-dev
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_DEV
    TGT_ENV: dev
    NODE_DEF: raw
  script:
    - *ecr_login_script
    - *create_image_tag
    - *build_raw_image
    - echo "$TGT_ENV Raw Image updated"

#######################
# BUILD STAGING  
#######################
bedrock-03-STG-rawimage:
  stage: build
  environment: stg
  needs: ["test", "lint"]
  rules:
    - if: $CI_COMMIT_BRANCH == "stg"
      when: always
    - if: $CI_COMMIT_BRANCH != "stg"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - proxy #devops
    - bedrock
    - shell
    - titanio-stg
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_STG
    TGT_ENV: stg
    NODE_DEF: raw
  script:
    - *ecr_login_script
    - *create_image_tag
    - *build_raw_image
    - echo "$TGT_ENV Raw Image updated"

#######################
# BUILD PRODUCTION/MAIN/LMN  
#######################
bedrock-04-PRD-rawimage:
  stage: build
  environment: lmn
  needs: ["test", "lint"]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: always
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - proxy #devops
    - bedrock
    - shell
    - titanio-lmn
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_LMN
    TGT_ENV: lmn
    NODE_DEF: raw
  script:
    - *ecr_login_script
    - *create_image_tag
    - *build_raw_image
    - echo "$TGT_ENV Raw Image updated"

#######################
# DEPLOY STAGE  
#######################
.update_raw_task_definition: &update_raw_task_definition |
  echo "**************************"
  echo "*** Update Validator Task Definition"
  echo "*** Unique elements that should be set in calling module are Wallet Private Key, Pool Address, Web_public_url, "
  echo "*** CI_WALLET_PRIVATE_KEY, CI_POOL_ADDRESS, CI_WEB_PUBLIC_URL"
  echo "**************************"
  aws ecs describe-task-definition --region $AWS_DEFAULT_REGION --task-definition tsk-$CI_AWS_TASK > output.json
  echo "**************************"
  echo "*** Original Task Definition"
  echo "**************************"
  jq . output.json 
  # Update the Image, Ulimit and Env Vars 
  jq '.taskDefinition.containerDefinitions[].image = "'$CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$TGT_ENV-latest'" |
      .taskDefinition.containerDefinitions[].ulimits = [{"name": "nofile", "softLimit": 15000, "hardLimit": 15000}] |
      .taskDefinition.containerDefinitions[].environment = [ 
        { "name": "COMMIT", "value": "'"$(git rev-parse HEAD)"'" }, 
        { "name": "ETH_NODE_ADDRESS", "value": "'"$CI_ETH_NODE_ADDRESS"'" },
        { "name": "ETH_NODE_LEGACY_TX", "value": "'"$ETH_NODE_LEGACY_TX"'" },
        { "name": "ENVIRONMENT", "value": "'"$ENVIRONMENT"'" },
        { "name": "HASHRATE_CYCLE_DURATION", "value": "'"$HASHRATE_CYCLE_DURATION"'" },
        { "name": "HASHRATE_VALIDATION_START_TIMEOUT", "value": "'"$HASHRATE_VALIDATION_START_TIMEOUT"'" },
        { "name": "HASHRATE_SHARE_TIMEOUT", "value": "'"$HASHRATE_SHARE_TIMEOUT"'" },
        { "name": "HASHRATE_ERROR_THRESHOLD", "value": "'"$HASHRATE_ERROR_THRESHOLD"'" },
        { "name": "HASHRATE_ERROR_TIMEOUT", "value": "'"$HASHRATE_ERROR_TIMEOUT"'" },
        { "name": "CLONE_FACTORY_ADDRESS", "value": "'"$CLONE_FACTORY_ADDRESS"'" },
        { "name": "CONTRACT_MNEMONIC", "value": "'"$CONTRACT_MNEMONIC"'" },
        { "name": "WALLET_PRIVATE_KEY", "value": "'"$CI_WALLET_PRIVATE_KEY"'" },
        { "name": "MINER_VETTING_DURATION", "value": "'"$MINER_VETTING_DURATION"'" },
        { "name": "MINER_SHARE_TIMEOUT", "value": "'"$MINER_SHARE_TIMEOUT"'" },
        { "name": "LOG_COLOR", "value": "'"$LOG_COLOR"'" },
        { "name": "LOG_JSON", "value": "'"$LOG_JSON"'" },
        { "name": "LOG_LEVEL_APP", "value": "'"$LOG_LEVEL_APP"'" },
        { "name": "LOG_LEVEL_CONNECTION", "value": "'"$LOG_LEVEL_CONNECTION"'" },
        { "name": "LOG_LEVEL_PROXY", "value": "'"$LOG_LEVEL_PROXY"'" },
        { "name": "LOG_LEVEL_SCHEDULER", "value": "'"$LOG_LEVEL_SCHEDULER"'" },
        { "name": "LOG_LEVEL_CONTRACT", "value": "'"$LOG_LEVEL_CONTRACT"'" },
        { "name": "POOL_ADDRESS", "value": "'"$CI_POOL_ADDRESS"'" },
        { "name": "POOL_CONN_TIMEOUT", "value": "'"$POOL_CONN_TIMEOUT"'" },
        { "name": "PROXY_ADDRESS", "value": "'"$PROXY_ADDRESS"'" },
        { "name": "SYS_ENABLE", "value": "'"$SYS_ENABLE"'" },
        { "name": "SYS_LOCAL_PORT_RANGE", "value": "'"$SYS_LOCAL_PORT_RANGE"'" },
        { "name": "SYS_NET_DEV_MAX_BACKLOG", "value": "'"$SYS_NET_DEV_MAX_BACKLOG"'" },
        { "name": "SYS_RLIMIT_HARD", "value": "'"$SYS_RLIMIT_HARD"'" },
        { "name": "SYS_RLIMIT_SOFT", "value": "'"$SYS_RLIMIT_SOFT"'" },
        { "name": "SYS_SOMAXCONN", "value": "'"$SYS_SOMAXCONN"'" },
        { "name": "SYS_TCP_MAX_SYN_BACKLOG", "value": "'"$SYS_TCP_MAX_SYN_BACKLOG"'" },
        { "name": "WEB_ADDRESS", "value": "'"$WEB_ADDRESS"'" },
        { "name": "WEB_PUBLIC_URL", "value": "'"$CI_WEB_PUBLIC_URL"'" }
      ]' output.json > updated.json
  # Extract JUST Task Definition from the output.json file
  jq '.taskDefinition' updated.json > extracted.json  
  # Remove sections that are not needed
  jq 'del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredBy, .registeredAt)' extracted.json > input.json
  sed -i 's/'$CI_AWS_ACCOUNT_SBX'/'$TGT_ACCOUNT'/g' input.json  
  echo "**************************"
  echo "*** New Task Definition"
  echo "**************************"
  cat input.json | jq .

.deploy_new_task_definition: &deploy_new_task_definition |
  aws ecs register-task-definition --region $AWS_DEFAULT_REGION --cli-input-json file://input.json
  REVISION=$(aws ecs describe-task-definition --task-definition tsk-$CI_AWS_TASK --region $AWS_DEFAULT_REGION | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
  echo "****************************************************"
  echo "****************************************************"
  echo "*** Update Task: "
  echo "*** - AWS Account: Titanio-$TGT_ENV"
  echo "*** - Cluster:    ecs-$CI_AWS_ECR_REPO-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION"
  echo "*** - Service:    svc-$CI_AWS_TASK-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION"
  echo "*** - Task:       tsk-$CI_AWS_TASK:$REVISION"
  echo "*** - Image:      $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG"
  echo "****************************************************"
  echo "****************************************************"
  aws ecs update-service --region $AWS_DEFAULT_REGION --cluster ecs-$CI_AWS_ECR_REPO-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION --service svc-$CI_AWS_TASK-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION --task-definition tsk-$CI_AWS_TASK:$REVISION

.deploy_raw_seller: &deploy_raw_seller
  - CI_AWS_TASK="proxy-router"
  - CI_WALLET_PRIVATE_KEY=$SELLER_PRIVATEKEY
  - CI_POOL_ADDRESS=$POOL_ADDRESS
  - CI_WEB_PUBLIC_URL=$WEB_PUBLIC_URL
  - CI_ETH_NODE_ADDRESS=$PROXY_ROUTER_ETH_NODE_ADDRESS
  - *ecr_login_script
  - *update_raw_task_definition
  - *deploy_new_task_definition

.deploy_raw_validator: &deploy_raw_validator
  - CI_AWS_TASK="proxy-validator"
  - CI_WALLET_PRIVATE_KEY=$VALIDATOR_PRIVATEKEY
  - CI_POOL_ADDRESS=$VALIDATOR_POOL_ADDRESS
  - CI_WEB_PUBLIC_URL="http://validatorapi.$TGT_ENV.lumerin.io"
  - CI_ETH_NODE_ADDRESS=$VALIDATOR_ETH_NODE_ADDRESS
  - *ecr_login_script
  - *update_raw_task_definition
  - *deploy_new_task_definition

#######################
# DEPLOY DEVELOPMENT 
#######################
bedrock-02-DEV-seller:
  stage: deploy
  environment: dev
  needs: ["bedrock-02-DEV-rawimage"]
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - if: $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - proxy #devops
    - bedrock
    - shell
    - titanio-dev
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_DEV
    TGT_ENV: dev
  script:
    - *deploy_raw_seller
    - echo "$TGT_ENV seller updated"

bedrock-02-DEV-validator:
  stage: deploy
  environment: dev
  needs: ["bedrock-02-DEV-rawimage"]
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - if: $CI_COMMIT_BRANCH != "dev"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - devops
    - bedrock
    - shell
    - titanio-dev
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_DEV
    TGT_ENV: dev
  script:
    - *deploy_raw_validator
    - echo "$TGT_ENV validator updated"

#######################
# DEPLOY STAGING 
#######################
bedrock-03-STG-seller:
  stage: deploy
  environment: stg
  needs: ["bedrock-03-STG-rawimage"]
  rules:
    - if: $CI_COMMIT_BRANCH == "stg"
      when: always
    - if: $CI_COMMIT_BRANCH != "stg"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - proxy #devops
    - bedrock
    - shell
    - titanio-stg
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_STG
    TGT_ENV: stg
  script:
    - *deploy_raw_seller
    - echo "$TGT_ENV seller updated"

bedrock-03-STG-validator:
  stage: deploy
  environment: stg
  needs: ["bedrock-03-STG-rawimage"]
  rules:
    - if: $CI_COMMIT_BRANCH == "stg"
      when: always
    - if: $CI_COMMIT_BRANCH != "stg"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - devops
    - bedrock
    - shell
    - titanio-stg
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_STG
    TGT_ENV: stg
  script:
    - *deploy_raw_validator
    - echo "$TGT_ENV validator updated"

#######################
# DEPLOY PRODUCTION / MAIN / LMN 
#######################
bedrock-04-PRD-seller:
  stage: deploy
  environment: lmn
  needs: ["bedrock-04-PRD-rawimage"]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - proxy #devops
    - bedrock
    - shell
    - titanio-lmn
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_LMN
    TGT_ENV: lmn
    PROXY_LOG_STRATUM: "false"
  script:
    - *deploy_raw_seller
    - echo "$TGT_ENV seller updated"

bedrock-04-PRD-validator:
  stage: deploy
  environment: lmn
  needs: ["bedrock-04-PRD-rawimage"]
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: manual
    - if: $CI_COMMIT_BRANCH != "main"
      when: never
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - devops
    - bedrock
    - shell
    - titanio-lmn
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_LMN
    TGT_ENV: lmn
  script:
    - *deploy_raw_validator
    - echo "$TGT_ENV validator updated"

#######################
# E2E TEST STAGE
#######################
# e2e-test:
#   stage: e2e-test
#   allow_failure: true
#   trigger:
#     project: TitanInd/proxy/router-test
#     branch: $CI_COMMIT_BRANCH
#     strategy: depend

#######################
# RELEASE STAGE
#######################
.default-release: &default-release
  inherit:
    default: false
  stage: release
  needs: ["test", "lint"]
  image:
    name: goreleaser/goreleaser:v1.19.2
    entrypoint: [""]

.default-tag: &default-tag
  stage: release
  needs: ["test", "lint"]
  image: node:alpine
  before_script:
    - export $(grep -v '^#' .version | xargs)
    - apk --no-cache add git
    - PROJECT_URL=$(echo $CI_PROJECT_URL | sed 's/https:\/\///')
    - git remote set-url origin https://oauth2:$CI_TAG_PUSH_TOKEN@$PROJECT_URL

create_tag:
  <<: *default-tag
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: manual
    - if: $CI_COMMIT_BRANCH == "stg"
      when: on_success
  script:
    - git fetch origin -f --prune --prune-tags
    - git tag "$VERSION-$CI_COMMIT_BRANCH"
    - git push origin --tags

create_tag_main:
  <<: *default-tag
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      when: on_success
  script:
    - git fetch origin -f --prune --prune-tags
    - git tag "$VERSION-lmn"
    - git push origin --tags

release-internal:
  <<: *default-release
  variables:
    GIT_DEPTH: 0
    GITLAB_TOKEN: $CI_TAG_PUSH_TOKEN
    GORELEASER_FORCE_TOKEN: gitlab
  only:
    - /.*-dev$/
    - /.*-stg$/
  script:
    - goreleaser release --clean -f "./.goreleaser-internal.yaml"
  artifacts:
    paths:
      - dist/proxy-router_*

release-external:
  <<: *default-release
  variables:
    GIT_DEPTH: 0
    GORELEASER_FORCE_TOKEN: github
  only:
    - /.*-lmn$/
  script:
    - goreleaser release --clean