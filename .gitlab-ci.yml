# image: golang:1.18
variables:
  CI_AWS_TASK: "proxy-router"
  ENVIRONMENT: "production" # production makes logs in json and not panics when calling DPanic
  HASHRATE_DIFF_THRESHOLD: "0.1"
  IS_BUYER: "false"
  MINER_VETTING_PERIOD_SECONDS: "30" # miner will not serve contracts for this period after connecing to proxy
  MINER_VETTING_DURATION: 1m
  NODE_DEF: "prt"
  POOL_MIN_DURATION: 2m
  POOL_MAX_DURATION: 5m
  PROXY_ADDRESS: "0.0.0.0:3333"
  PROXY_LOG_STRATUM: "false"
  WEB_ADDRESS: "0.0.0.0:8080"
  VALIDATION_BUFFER_PERIOD: 20m
  STRATUM_SOCKET_BUFFER_SIZE: 5

stages:
  - test
  - deploy

lint:
  inherit:
    default: false
  image: golangci/golangci-lint:v1.49
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  stage: test
  script:
    - golangci-lint run -v

test:
  inherit:
    default: false
  image: golang:1.18-alpine
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_HOST: tcp://docker:2376
    DOCKER_TLS_CERTDIR: "/certs"
    DOCKER_TLS_VERIFY: 1
    DOCKER_CERT_PATH: "$DOCKER_TLS_CERTDIR/client"
  stage: test
  script:
    - apk add --no-cache git make musl-dev gcc
    - go version
    - go mod download
    - go test -v -p 1 $(go list ./... | grep -v /test) # skips the test folder for now

.ecr_login_script: &ecr_login_script |
  echo "**************************"
  echo "*** ECR Login to Shared Titanio-NET Repo in USE-1"
  echo "**************************"
  docker system prune -af
  aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $CI_AWS_TitanIO_NET_ECR

.create_image_tag: &create_image_tag |
  echo "**************************"
  echo "*** Tag Image "
  echo "**************************"
  IMAGE_TAG="$(echo $CI_COMMIT_SHA | head -c 8)-$TGT_ENV-$NODE_DEF" 
  echo $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG

.build_image_script: &build_image_script |
  echo "**************************"
  echo "*** Build Image "
  echo "**************************"
  docker build \
  -t $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG --no-cache . \
  --build-arg WEB_ADDRESS=$WEB_ADDRESS \
  --build-arg PROXY_ADDRESS=$PROXY_ADDRESS \
  --build-arg ETH_NODE_ADDRESS=$ETH_NODE_ADDRESS \
  --build-arg IS_BUYER=$IS_BUYER \
  --build-arg ENVIRONMENT=$ENVIRONMENT \
  --build-arg CLONE_FACTORY_ADDRESS=$CLONE_FACTORY_ADDRESS \
  --build-arg WALLET_ADDRESS=$WALLET_ADDRESS \
  --build-arg WALLET_PRIVATE_KEY=$WALLET_PRIVATE_KEY \
  --build-arg PROXY_LOG_STRATUM=$PROXY_LOG_STRATUM \
  --build-arg MINER_VETTING_PERIOD_SECONDS=$MINER_VETTING_PERIOD_SECONDS \
  --build-arg MINER_VETTING_DURATION=$MINER_VETTING_DURATION \
  --build-arg POOL_ADDRESS=$POOL_ADDRESS \
  --build-arg POOL_MIN_DURATION=$POOL_MIN_DURATION \
  --build-arg POOL_MAX_DURATION=$POOL_MAX_DURATION \
  --build-arg VALIDATION_BUFFER_PERIOD=$VALIDATION_BUFFER_PERIOD  \
  --build-arg STRATUM_SOCKET_BUFFER_SIZE=$STRATUM_SOCKET_BUFFER_SIZE  
  echo "**************************"
  echo "*** Push Image"
  echo "**************************"
  docker push $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG

.update_task_definition: &update_task_definition |
  echo "**************************"
  echo "*** Update Task Definition"
  echo "**************************"
  aws ecs describe-task-definition --region $AWS_DEFAULT_REGION --task-definition tsk-$CI_AWS_TASK > input.json
  echo "**************************"
  echo "*** Old Task Definition"
  echo "**************************"
  cat input.json | jq .
  echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].image='\"$CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG\") > input.json 
  echo $(cat input.json | jq '.taskDefinition.containerDefinitions[].ulimits=[{"name":"nofile","softLimit":15000,"hardLimit":15000}]') > input.json
  echo $(cat input.json | jq '.taskDefinition') > input.json  
  echo $(cat input.json | jq  'del(.taskDefinitionArn)' | jq 'del(.revision)' | jq 'del(.status)' | jq 'del(.requiresAttributes)' | jq 'del(.compatibilities)' | jq 'del(.registeredBy)' | jq 'del(.registeredAt)') > input.json
  sed -i 's/'$CI_AWS_ACCOUNT_SBX'/'$TGT_ACCOUNT'/g' input.json  
  echo "**************************"
  echo "*** New Task Definition"
  echo "**************************"
  cat input.json | jq .

.deploy_new_task_definition: &deploy_new_task_definition |
  aws ecs register-task-definition --region $AWS_DEFAULT_REGION --cli-input-json file://input.json
  REVISION=$(aws ecs describe-task-definition --task-definition tsk-$CI_AWS_TASK --region $AWS_DEFAULT_REGION | egrep "revision" | tr "/" " " | awk '{print $2}' | sed 's/"$//' | cut -d "," -f 1)
  echo "****************************************************"
  echo "****************************************************"
  echo "*** Update Task: "
  echo "*** - AWS Account: Titanio-$TGT_ENV"
  echo "*** - Cluster:    ecs-$CI_AWS_ECR_REPO-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION"
  echo "*** - Service:    svc-$CI_AWS_TASK-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION"
  echo "*** - Task:       tsk-$CI_AWS_TASK:$REVISION"
  echo "*** - Image:      $CI_AWS_TitanIO_NET_ECR/$CI_AWS_ECR_REPO:$IMAGE_TAG"
  echo "****************************************************"
  echo "****************************************************"
  aws ecs update-service --region $AWS_DEFAULT_REGION --cluster ecs-$CI_AWS_ECR_REPO-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION --service svc-$CI_AWS_TASK-$TGT_ENV-$CI_AWS_ECS_CLUSTER_REGION --task-definition tsk-$CI_AWS_TASK:$REVISION

.deploy_seller: &deploy_seller
  - *ecr_login_script
  - *create_image_tag
  - *build_image_script
  - *update_task_definition
  - *deploy_new_task_definition

.deploy_buyer: &deploy_buyer
  - POOL_ADDRESS="//titan1.ecs-$TGT_ENV-buyer:@mining.pool.titan.io:4242"
  - WALLET_ADDRESS=$BUYER_WALLET_ADDRESS
  - WALLET_PRIVATE_KEY=$BUYER_PRIVATEKEY
  - IS_BUYER="true"
  - NODE_DEF="buy"
  - CI_AWS_TASK="proxy-buyer"
  - *ecr_login_script
  - *create_image_tag
  - *build_image_script
  - *update_task_definition
  - *deploy_new_task_definition

default:
  image: registry.gitlab.com/gitlab-org/cloud-deploy/aws-base:latest

bedrock-02-DEV-seller:
  stage: deploy
  environment: dev
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - if: $CI_COMMIT_BRANCH != "dev"
      when: manual
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - devops
    - bedrock
    - shell
    - titanio-dev
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_DEV
    TGT_ENV: dev
    POOL_ADDRESS: "//titan1.ecs-dev:@mining.pool.titan.io:4242"
  script:
    - *deploy_seller
    - echo "$TGT_ENV seller updated"

bedrock-02-DEV-buyer:
  stage: deploy
  environment: dev
  rules:
    - if: $CI_COMMIT_BRANCH == "dev"
      when: always
    - if: $CI_COMMIT_BRANCH != "dev"
      when: manual
    - if: $CI_MERGE_REQUEST_ID
      when: never
  tags:
    - devops
    - bedrock
    - shell
    - titanio-dev
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_DEV
    TGT_ENV: dev
    POOL_ADDRESS: "//titan1.ecs-dev:@mining.pool.titan.io:4242"
  script:
    - *deploy_buyer
    - echo "$TGT_ENV buyer updated"

bedrock-03-STG-seller:
  stage: deploy
  environment: stg
  only:
    - stg
  tags:
    - devops
    - bedrock
    - shell
    - titanio-stg
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_STG
    TGT_ENV: stg
    POOL_ADDRESS: "//titan1.ecs-stg:@mining.pool.titan.io:4242"
  script:
    - *deploy_seller
    - echo "$TGT_ENV seller updated"

bedrock-03-STG-buyer:
  stage: deploy
  environment: stg
  only:
    - stg
  tags:
    - devops
    - bedrock
    - shell
    - titanio-stg
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_STG
    TGT_ENV: stg
    POOL_ADDRESS: "//titan1.ecs-stg:@mining.pool.titan.io:4242"
  script:
    - *deploy_buyer
    - echo "$TGT_ENV buyer updated"

bedrock-04-PRD-seller:
  stage: deploy
  environment: lmn
  only:
    - main
  tags:
    - devops
    - bedrock
    - shell
    - titanio-lmn
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_LMN
    TGT_ENV: lmn
    PROXY_LOG_STRATUM: "false"
    POOL_ADDRESS: "//titan1.ecs-lmn:@mining.pool.titan.io:4242"
  script:
    - *deploy_seller
    - echo "$TGT_ENV seller updated"

bedrock-04-PRD-buyer:
  stage: deploy
  environment: lmn
  only:
    - main
  tags:
    - devops
    - bedrock
    - shell
    - titanio-lmn
  variables:
    TGT_ACCOUNT: $CI_AWS_ACCOUNT_LMN
    TGT_ENV: lmn
    PROXY_LOG_STRATUM: "false"
    POOL_ADDRESS: "//titan1.ecs-lmn:@mining.pool.titan.io:4242"
  script:
    - *deploy_buyer
    - echo "$TGT_ENV buyer updated"
